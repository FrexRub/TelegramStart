import asyncio
from aiogram import Router, F
from aiogram.filters import CommandStart, Command, CommandObject
from aiogram.types import Message
from aiogram.types import CallbackQuery
from aiogram.utils.chat_action import ChatActionSender

from src.utils.make_faker import get_random_person
from src.keyboards.all_kb import main_kb, create_space_kb, create_rat
from src.keyboards.inline_kbs import ease_link_kb, create_qst_inline_kb
from src.utils.make_faker import questions
from src.core.config import bot

router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message, command: CommandObject):
    command_arg: str = command.args  # https://t.me/your_bot?start=hi -> args="hi"
    if command_arg:
        await message.answer(
            f"–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start with command_arg: {command_arg}",
            reply_markup=main_kb(message.from_user.id),
        )
    else:
        await message.answer(
            "–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start without command_arg",
            reply_markup=main_kb(message.from_user.id),
        )


@router.message(Command("next"))
async def cmd_start_1(message: Message):
    await message.answer(
        "–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /next", reply_markup=create_space_kb()
    )


@router.message(Command("faq"))
async def cmd_start_faq(message: Message):
    await message.answer(
        "–ò–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏",
        reply_markup=create_qst_inline_kb(questions=questions),
    )


@router.message(F.text == "/help")
async def cmd_start_2(message: Message):
    await message.answer("–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /help", reply_markup=create_rat())


@router.message(F.text == "–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω!")
async def get_inline_btn_link(message: Message):
    await message.answer(
        "–í–æ—Ç —Ç–µ–±–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!", reply_markup=ease_link_kb()
    )


@router.callback_query(F.data == "get_person")
async def send_random_person(call: CallbackQuery):
    # call.answer –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –º–∏–≥–∞–ª–∞ –∫–Ω–æ–ø–∫–∞ –≤—ã–∑–æ–≤–∞ callback
    await call.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=False)
    user = get_random_person()
    formatted_message = (
        f"üë§ <b>–ò–º—è:</b> {user['name']}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {user['address']}\n"
        f"üìß <b>Email:</b> {user['email']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user['phone_number']}\n"
        f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user['birth_date']}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {user['company']}\n"
        f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user['job']}\n"
    )
    await call.message.answer(formatted_message)


@router.callback_query(F.data == "back_home")
async def back_to_home(callback: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É!",
        reply_markup=main_kb(callback.from_user.id),
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
    await callback.answer()


@router.callback_query(F.data.startswith("qst_"))
async def cmd_query(call: CallbackQuery):
    await call.answer()
    qst_id = int(call.data.replace("qst_", ""))
    qst_data = questions[qst_id]
    msg_text = (
        f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qst_data.get("qst")}\n\n'
        f'<b>{qst_data.get("answer")}</b>\n\n'
        f"–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å:"
    )
    # —ç–º–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞ –±–æ—Ç–æ–º
    async with ChatActionSender(bot=bot, chat_id=call.from_user.id, action="typing"):
        await asyncio.sleep(2)
        await call.message.answer(
            msg_text, reply_markup=create_qst_inline_kb(questions)
        )
